import discord
from discord import ui, Embed, ButtonStyle
from discord.ext import commands, tasks
from discord import app_commands
from src.database.db import get_cursor, get_connection

c = get_cursor()
conn = get_connection()

class MoneyMakingView(discord.ui.View):
    def __init__(self, user_id, button_states=None, page=0, buttons_clicked=0):
        super().__init__(timeout=300)  # 5Î∂Ñ ÌÉÄÏûÑÏïÑÏõÉ ÏÑ§Ï†ï
        self.user_id = user_id
        self.page = page
        self.buttons_clicked = buttons_clicked
        self.button_states = button_states if button_states else [False] * 20
        self.buttons = []

        start = page * 10
        end = start + 10
        for i in range(start, end):
            button = discord.ui.Button(label="‚¨ú", custom_id=f"work_{i+1}", style=discord.ButtonStyle.success if self.button_states[i] else discord.ButtonStyle.primary)
            button.callback = self.on_button_click
            button.disabled = self.button_states[i]
            self.add_item(button)
            self.buttons.append(button)

        if page > 0:
            prev_button = discord.ui.Button(label="Ïù¥Ï†Ñ", style=discord.ButtonStyle.secondary)
            prev_button.callback = self.prev_page
            self.add_item(prev_button)

        if end < 20:
            next_button = discord.ui.Button(label="Îã§Ïùå", style=discord.ButtonStyle.secondary)
            next_button.callback = self.next_page
            self.add_item(next_button)

    async def on_button_click(self, interaction: discord.Interaction):
        if interaction.user.id != self.user_id:
            await interaction.response.send_message("Ïù¥ ÏûëÏóÖÏùÄ ÎãπÏã†Ïù¥ ÏãúÏûëÌïú ÏûëÏóÖÏù¥ ÏïÑÎãôÎãàÎã§.", ephemeral=True)
            return

        self.buttons_clicked += 1
        button_index = int(interaction.data['custom_id'].split('_')[1]) - 1
        self.button_states[button_index] = True
        button = discord.utils.get(self.buttons, custom_id=interaction.data['custom_id'])
        button.style = discord.ButtonStyle.success
        button.disabled = True
        await interaction.response.edit_message(view=self)

        if self.buttons_clicked == 20:
            update_user_coins(self.user_id, 20)
            await interaction.edit_original_response(
                embed=discord.Embed(
                    title="ÎÖ∏Í∞ÄÎã§ ÏôÑÎ£å!",
                    description=f"20Í∞úÏùò Î≤ÑÌäºÏùÑ Î™®Îëê ÌÅ¥Î¶≠ÌïòÏó¨ 20Í∞úÏùò ÏΩîÏù∏ÏùÑ ÌöçÎìùÌñàÏäµÎãàÎã§! ÌòÑÏû¨ ÏΩîÏù∏: {format_coins(get_user_coins(self.user_id))}Í∞ú ü™ô",
                    color=discord.Color.green()
                )
            )
            update_daily_tasks(self.user_id, "ÎÖ∏Í∞ÄÎã§")
            bot.ongoing_tasks.remove(self.user_id)
            self.stop()
        else:
            embed = discord.Embed(
                title="ÎÖ∏Í∞ÄÎã§ ÏûëÏóÖ",
                description=f"{self.buttons_clicked}/20 Î≤ÑÌäºÏùÑ ÌÅ¥Î¶≠ÌñàÏäµÎãàÎã§.",
                color=discord.Color.blue()
            )
            await interaction.edit_original_response(embed=embed, view=self)

    async def prev_page(self, interaction: discord.Interaction):
        self.page -= 1
        await interaction.response.edit_message(view=MoneyMakingView(self.user_id, self.button_states, self.page, self.buttons_clicked))

    async def next_page(self, interaction: discord.Interaction):
        self.page += 1
        await interaction.response.edit_message(view=MoneyMakingView(self.user_id, self.button_states, self.page, self.buttons_clicked))


class ArithmeticProblemView(discord.ui.View):
    def __init__(self, user_id, correct_answer):
        super().__init__(timeout=300)  # 5Î∂Ñ ÌÉÄÏûÑÏïÑÏõÉ ÏÑ§Ï†ï
        self.user_id = user_id
        self.correct_answer = correct_answer

        choices = [correct_answer, correct_answer + random.randint(1, 10), correct_answer - random.randint(1, 10), correct_answer + random.randint(11, 20)]
        random.shuffle(choices)

        for choice in choices:
            button = discord.ui.Button(label=str(choice), custom_id=str(choice))
            button.callback = self.on_button_click
            self.add_item(button)

    async def on_button_click(self, interaction: discord.Interaction):
        if interaction.user.id != self.user_id:
            await interaction.response.send_message("Ïù¥ ÏûëÏóÖÏùÄ ÎãπÏã†Ïù¥ ÏãúÏûëÌïú ÏûëÏóÖÏù¥ ÏïÑÎãôÎãàÎã§.", ephemeral=True)
            return

        selected_answer = int(interaction.data['custom_id'])
        if selected_answer == self.correct_answer:
            update_user_coins(self.user_id, 10)
            await interaction.response.send_message(
                embed=discord.Embed(
                    title="Ï†ïÎãµÏûÖÎãàÎã§!",
                    description=f"10Í∞úÏùò ÏΩîÏù∏ÏùÑ ÌöçÎìùÌñàÏäµÎãàÎã§! ÌòÑÏû¨ ÏΩîÏù∏: {format_coins(get_user_coins(self.user_id))}Í∞ú ü™ô",
                    color=discord.Color.green()
                )
            )
            update_daily_tasks(self.user_id, "Î¨∏Ï†úÌíÄÍ∏∞")
            bot.ongoing_tasks.remove(self.user_id)
            self.stop()
        else:
            await interaction.response.send_message(
                embed=discord.Embed(
                    title="Ïò§ÎãµÏûÖÎãàÎã§!",
                    description="Îã§Ïãú ÏãúÎèÑÌïòÏÑ∏Ïöî!",
                    color=discord.Color.red()
                ),
                ephemeral=True
            )

    async def on_timeout(self):
        await self.message.edit(
            embed=discord.Embed(
                title="ÏãúÍ∞Ñ Ï¥àÍ≥º",
                description="ÏãúÍ∞ÑÏù¥ Ï¥àÍ≥ºÎêòÏóàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.",
                color=discord.Color.red()
            ),
            view=None
        )
        bot.ongoing_tasks.remove(self.user_id)

bot.ongoing_tasks = set()

def check_and_reset_daily_tasks(user_id):
    current_time = get_korean_time()
    reset = False

    c.execute("SELECT last_reset, work_count, problem_count FROM daily_tasks WHERE user_id = ?", (user_id,))
    row = c.fetchone()

    if row:
        last_reset, work_count, problem_count = row
        last_reset_time = datetime.fromisoformat(last_reset).astimezone(KST)
        if (current_time - last_reset_time).total_seconds() >= 86400: 
            reset = True
            work_count = 0
            problem_count = 0
            c.execute("UPDATE daily_tasks SET last_reset = ?, work_count = ?, problem_count = ? WHERE user_id = ?", (current_time.isoformat(), work_count, problem_count, user_id))
            conn.commit()
    else:
        reset = True
        work_count = 0
        problem_count = 0
        c.execute("INSERT INTO daily_tasks (user_id, last_reset, work_count, problem_count) VALUES (?, ?, ?, ?)", (user_id, current_time.isoformat(), work_count, problem_count))
        conn.commit()

    return reset, work_count, problem_count, current_time

def money_making(bot):
    @bot.tree.command(name="ÎèàÎ≤åÍ∏∞", description="ÎÖ∏Í∞ÄÎã§ ÎòêÎäî Î¨∏Ï†úÌíÄÍ∏∞Î•º ÏÑ†ÌÉùÌïòÏó¨ ÎèàÏùÑ Î≤ïÎãàÎã§.")
    @app_commands.choices(option=[
        app_commands.Choice(name="ÎÖ∏Í∞ÄÎã§", value="ÎÖ∏Í∞ÄÎã§"),
        app_commands.Choice(name="Î¨∏Ï†úÌíÄÍ∏∞", value="Î¨∏Ï†úÌíÄÍ∏∞")
    ])
    @app_commands.guild_only()
    async def money_making_command(interaction: discord.Interaction, option: app_commands.Choice[str]):
        try:
            user_id = interaction.user.id
            reset, work_count, problem_count, last_reset_time = check_and_reset_daily_tasks(user_id)
            current_time = get_korean_time()

            if option.value == "ÎÖ∏Í∞ÄÎã§":
                if work_count >= 5:
                    time_diff = (current_time - last_reset_time).total_seconds()
                    time_remaining = 86400 - time_diff
                    hours, remainder = divmod(time_remaining, 3600)
                    minutes, seconds = divmod(remainder, 60)
                    await interaction.response.send_message(
                        embed=discord.Embed(
                            title="ÎÖ∏Í∞ÄÎã§ Ï†úÌïú",
                            description=f"Ïò§ÎäòÏùÄ Îçî Ïù¥ÏÉÅ ÎÖ∏Í∞ÄÎã§ ÏûëÏóÖÏùÑ Ìï† Ïàò ÏóÜÏäµÎãàÎã§. ÎÇ¥Ïùº Îã§Ïãú ÏãúÎèÑÌïòÏÑ∏Ïöî. ÎÇ®ÏùÄ ÏãúÍ∞Ñ: {int(hours)}ÏãúÍ∞Ñ {int(minutes)}Î∂Ñ {int(seconds)}Ï¥à",
                            color=discord.Color.red()
                        ),
                        ephemeral=True
                    )
                    return
                if user_id in bot.ongoing_tasks:
                    await interaction.response.send_message(
                        embed=discord.Embed(
                            title="ÏßÑÌñâ Ï§ëÏù∏ ÏûëÏóÖ",
                            description="Ïù¥ÎØ∏ ÏßÑÌñâ Ï§ëÏù∏ ÎÖ∏Í∞ÄÎã§ ÏûëÏóÖÏù¥ ÏûàÏäµÎãàÎã§.",
                            color=discord.Color.red()
                        ),
                        ephemeral=True
                    )
                    return
                embed = discord.Embed(
                    title="ÎÖ∏Í∞ÄÎã§ ÏûëÏóÖ",
                    description="20Í∞úÏùò Î≤ÑÌäºÏùÑ ÌÅ¥Î¶≠ÌïòÏó¨ 20Í∞úÏùò ÏΩîÏù∏ÏùÑ ÌöçÎìùÌïòÏÑ∏Ïöî!",
                    color=discord.Color.blue()
                )
                await interaction.response.send_message(embed=embed)
                message = await interaction.original_response()
                view = MoneyMakingView(user_id)
                await message.edit(view=view)
                bot.ongoing_tasks.add(user_id)
            elif option.value == "Î¨∏Ï†úÌíÄÍ∏∞":
                if problem_count >= 5:
                    time_diff = (current_time - last_reset_time).total_seconds()
                    time_remaining = 86400 - time_diff
                    hours, remainder = divmod(time_remaining, 3600)
                    minutes, seconds = divmod(remainder, 60)
                    await interaction.response.send_message(
                        embed=discord.Embed(
                            title="Î¨∏Ï†úÌíÄÍ∏∞ Ï†úÌïú",
                            description=f"Ïò§ÎäòÏùÄ Îçî Ïù¥ÏÉÅ Î¨∏Ï†úÌíÄÍ∏∞Î•º Ìï† Ïàò ÏóÜÏäµÎãàÎã§. ÎÇ¥Ïùº Îã§Ïãú ÏãúÎèÑÌïòÏÑ∏Ïöî. ÎÇ®ÏùÄ ÏãúÍ∞Ñ: {int(hours)}ÏãúÍ∞Ñ {int(minutes)}Î∂Ñ {int(seconds)}Ï¥à",
                            color=discord.Color.red()
                        ),
                        ephemeral=True
                    )
                    return
                if user_id in bot.ongoing_tasks:
                    await interaction.response.send_message(
                        embed=discord.Embed(
                            title="ÏßÑÌñâ Ï§ëÏù∏ ÏûëÏóÖ",
                            description="Ïù¥ÎØ∏ ÏßÑÌñâ Ï§ëÏù∏ Î¨∏Ï†úÌíÄÍ∏∞ ÏûëÏóÖÏù¥ ÏûàÏäµÎãàÎã§.",
                            color=discord.Color.red()
                        ),
                        ephemeral=True
                    )
                    return
                num1 = random.randint(1, 50)
                num2 = random.randint(1, 50)
                operator = random.choice(['+', '-', '*', '/'])
                if operator == '+':
                    correct_answer = num1 + num2
                elif operator == '-':
                    correct_answer = num1 - num2
                elif operator == '*':
                    correct_answer = num1 * num2
                else:
                    num1 = num1 * num2
                    correct_answer = num1 // num2

                problem_text = f"{num1} {operator} {num2} = ?"
                view = ArithmeticProblemView(user_id, correct_answer)
                embed = discord.Embed(
                    title="Î¨∏Ï†úÌíÄÍ∏∞",
                    description=f"Îã§Ïùå Î¨∏Ï†úÎ•º ÌíÄÏñ¥Ï£ºÏÑ∏Ïöî: `{problem_text}`",
                    color=discord.Color.blue()
                )
                await interaction.response.send_message(embed=embed, view=view)
                bot.ongoing_tasks.add(user_id)
            else:
                await interaction.response.send_message("Ïò¨Î∞îÎ•¥ÏßÄ ÏïäÏùÄ ÏòµÏÖòÏûÖÎãàÎã§.", ephemeral=True)
        except Exception as e:
            if interaction.response.is_done():
                await interaction.followup.send(f"Ïò§Î•ò Î∞úÏÉù: {str(e)}", ephemeral=True)
            else:
                await interaction.response.send_message(f"Ïò§Î•ò Î∞úÏÉù: {str(e)}", ephemeral=True)